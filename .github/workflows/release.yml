name: create-release
on:
  push:
    tags:
      - 'v*'

jobs:
  artifacts:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact: Linux
          - os: windows-latest
            artifact: Windows
    env:
      VCPKG_DISABLE_METRICS: 1

    # [OPTIONAL] Define the vcpkg's triplet 
    # you want to enforce, otherwise the default one 
    # for the hosting system will be automatically
    # choosen (x64 is the default on all platforms, 
    # e.g. x64-osx).
    # VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }} 

    steps:
      - name: Install prerequisites
        if: ${{ matrix.os=='ubuntu-latest' }}
        run: |
          sudo apt-get install libegl1-mesa-dev
          sudo -H python3 -m pip install Jinja2

      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
          testPreset: 'test-release'
          packagePreset: 'package-release-${{ matrix.os }}'

      - name: Find build artifacts
        uses: actions/github-script@v7
        id: find_artifacts
        with:
          script: return (await (await glob.create('package/osccalib-*')).glob())[0]
          result-encoding: string

      - name: Upload
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ matrix.artifact }}
          path: ${{steps.find_artifacts.outputs.result}}

  release:
    name: Create Release
    needs: artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate release changelog
        id: generate_changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.generate_changelog.outputs.changelog }}
      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: package
      - name: Upload release artifact Linux
        uses: NBTX/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          targets: 'package/**/osccalib-*'
